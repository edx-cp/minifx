# This workflow will build minicp with Maven, and cache/restore any dependencies to improve the workflow execution time
# Before building we have to make sure all test pass. Once done we then generate release our release.

name: minifx CI-CD

on:
  push:
    branches:
      - '*.*.*'
  pull_request:
    branches:
      - '*.*.*'

jobs:
  Test:
    steps:
      - uses: actions/checkout@v2.1.0

      - name: Create Release
        uses: aaiezza/create-release@master
        id: create_release
        with:
          release_branch: releases/0.0.1
          tag: 0.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Jar
        uses: actions/upload-release-asset@v1.0.2
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
         upload_url: ${{ steps.create_release.outputs.upload_url }}
         asset_path: target/${{ needs.version.outputs.jar-name }}
         asset_name: ${{ needs.version.outputs.release-jar-name }}
         asset_content_type: application/java-archive
         
#   CI:
#     runs-on: ${{matrix.os}}
#     strategy:
#       matrix:
#         os: [ubuntu-latest] #, macos-latest, windows-latest

#     steps:
#     - name: Checkout GitHub Actions
#       uses: actions/checkout@v3

#     - name: Set up JDK 18
#       uses: actions/setup-java@v3
#       with:
#         java-version: '18'
#         distribution: 'temurin'
#         architecture: x64
#         cache: maven

#     - name: Tests
#       run: mvn test
#       #mvn --batch-mode --update-snapshots verify

#     - name: Build
#       run: mvn -B package --file pom.xml
#   CD:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     needs: CI

#     steps:
#     - name: Checkout GitHub Actions
#       uses: actions/checkout@v3

#     - name: Extract branch name
#       shell: bash
#       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
#       id: extract_branch

#     - name: Create Release
#       uses: ncipollo/release-action@v1
#       with:
#         tag: v-${{ steps.extract_branch.outputs.branch }}
#         name: Release v-${{ steps.extract_branch.outputs.branch }}
#         artifacts: "release.tar.gz,foo/*.txt"
#         body: ${{ github.event.head_commit.message }}
#         generateReleaseNotes: true
#         replacesArtifacts: true
#         token: ${{ secrets.GITHUB_TOKEN }}
